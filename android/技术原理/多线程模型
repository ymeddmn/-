当我们启动一个app的时候android系统会启动一个Linux process，这个进程包含一个线程就是我们的UI Thread
可以再manifest中加入android:process指定组件运行在不同进程中，这样当一个组件启动的时候如果进程已经存在那么组件直接通过这个进程被启动起来
如果卡顿时间超过5秒就会出现anr  application not response
android提供了4中常用的操作多线程的方式
1、Handler+Thread
2、AsyncTask
3、ThreadPoolExecutor
4、IntentService


1、android的主线程中包含一个消息队列MessageQueue，该队列可以存放一系列Message Runnable对象，我们可以通过Hanlder向消息队列中放入Message 或Runnable。handler会再创建的时候绑定它所在的线程（不一定非要再主线程），再出队列的时候会在Handler绑定的线程中处理Message Runnable

handler的缺点是代码冗余较多

2、AsyncTask是android提供的异步类，通过继承AsyncTask可以再doInbackground方法里面处理异步任务，然后在主线程中更新ui

优点：处理单个异步任务的能力强
可以通过cancel取消任务

3、ThreadPoolExecutor  提供了一组线程池，共四种
 a、newFixedThreadPool（）  创建一个定长的线程池，每次新任务创建一个新线程知道达到线程池的长度
 b、newCacheThreadPool()   创建一个可缓存的线程池，如果线程的长度超过了处理的需要会重复利用已经闲置的线程，不会对线程的长度做出限制
 c、newScheduleThreadPool()   创建一个定长的线程池，支持以定时和周期的方式执行
 d、newSingleThreadExecutor()  创建一个单线程化的executor，它只创建单一的工作线程来执行任务

 优点：批量处理任务


 4、IntentService  是一个轻量级的service，用来处理异步请求，客户端通过调用startService启动service处理完异步任务后自动关闭service


 