一篇不错的性能优化文章：https://blog.csdn.net/zhangbijun1230/article/details/79449725


高质量应用四个条件：快、稳、省、小

快：使用是避免出现卡顿，响应速度快  （卡顿）
稳：低crash，低anr，不在用户使用过程中出现崩溃  （内存泄露崩溃）
省：节省流量和电量减少用户使用成本、避免使用时候cpu发烫  （代码质量逻辑）
小：安装包小可以降低用户使用成本    （安装包过大）



性能优化有四种
1、cpu优化
2、内存优化
3、网络优化
4、能耗（耗电）

profiler中有四个选项
CPU
MEMERY
NETWORK
ENERGY


内存不足会出现稳定性问题
cpu不足会出现卡顿





卡顿优化：UI绘制（绘制刷新）、应用启动（冷启动、热启动）、页面跳转（页面间切换、前后台切换）、事件响应（按键、系统事件、滑动事件）

界面绘制：绘制的层级深，页面复杂刷新不合理（更多出现在刚启动页面跳转的时候）
数据处理：数据处理量较大，分三种情况：
a、数据处理在ui线程
b、数据处理线程多，主线程抢不到cpu事件
c、内存增加导致频繁gc
影响绘制的原因：
a、绘制任务太重，绘制一帧时间太长
b、主线程太忙，系统通知绘制的时候还没有处理好数据导致丢帧

所以应该避免让主线程做太多耗时操作主线程主要该做的事情应该是：UI生命周期控制、消息处理、界面布局、界面绘制、界面刷新



性能分析工具：
1、手机上自带工具：profile gpu rending（华为手机叫gpu呈现模式工具）
a、一个图形检测工具、能够实时检测绘制耗时
b、横轴表示时间、纵轴表示耗时
c、随这时间推移，从左到右的刷新时间耗时
d、提供一个标准的耗时如果高于这个标准就表示当前这一帧丢了

2、TraceView
3、SysTrace UI

A、布局优化：
布局是否合理主要影响的是界面测量时间的多少，因为页面的测量和绘制都是通过递归来完成的，如果层级太深那么每增加一个层级就会增加一层页面显示时间

布局优化注意点：减少层级、减少测量和绘制时间、提高复用
a、减少层级：合理使用RelativeLayout和LinearLayout
b、减少测量和绘制时间：尽量少使用wrapcontent，因为它会增加测量时间（在宽高确定情况下尽量不用）
c、布局复用：可以通过标签来提高复用


B、避免过度绘制：启动主要做三件事：UI布局、绘制、数据准备
UI布局可以通过Profile GPU Rending检测丢帧情况
启动加载优化：可以通过不加载、延迟加载优化

C、合理的刷新机制：
在应用开发过程中，因为数据的变化，需要刷新页面来展示数据。但是频繁的刷新会增加资源消耗因此会导致卡顿
优化建议：
1、尽量减少刷新次数
2、尽量避免后台有高cpu线程运行
3、缩小刷新区域


常见内存泄露场景：
1、资源性对象未关闭，比如cursor，file文件等。这些对象一般都有缓冲应该及时关闭
2、注册事件未及时注销（会导致被观察者中依然有对象的引用）
3、长生命周期引用短生命周期对象
4、匿名内部类的静态实例
5、容器中的对象没有及时清理导致内存泄露


内存优化建议：
1、对象的引用方式合理使用：强引用、软引用、弱引用、虚引用
2、减少不必要的内存开销：有效的利用系统自带的资源，视图复用，对象池、bitmap的使用




耗电优化：


减少安装包大小：代码混淆、资源优化、图片优化、避免重复功能的库、插件化


